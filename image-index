<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Image 2 XML Generator (Unified v6)</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
  <style>
    :root{
      --brand-dim1:#0f2a2acc; --brand-dim2:#0b1f1fcc;
      --bg-grad1:#1a7a6a33; --bg-grad2:#1a4a7a33;
      --brand-gradA:#113636cc; --brand-gradB:#0b2424;
      --edge:#234344; --edge-strong:#2f6666;
      --radius:16px; --shadow:0 18px 50px rgba(0,0,0,.45);
      --accentTop:#5eead4; --accentBot:#14b8a6;
      --orange:#ff9a3c;
    }
    *{ box-sizing:border-box }
    html, body{ height:100% }
    body{
      margin:0;
      font-family:Poppins, system-ui, -apple-system, Segoe UI, Roboto, "Helvetica Neue", Arial;
      color:#e9fffb;
      background:
        radial-gradient(1200px 600px at 85% -10%, var(--bg-grad1), transparent 70%),
        radial-gradient(900px 480px at -10% 10%, var(--bg-grad2), transparent 70%),
        linear-gradient(180deg, #071a1a, #071a1a 40%, #071a1a);
    }
    header{
      position:sticky; top:0; z-index:5;
      padding:14px; display:flex; justify-content:center;
      background: linear-gradient(180deg, rgba(7,26,26,.85), rgba(7,26,26,.35) 60%, transparent);
      -webkit-backdrop-filter: blur(8px); backdrop-filter: blur(8px);
    }
    header .brand{
      display:flex; align-items:center; gap:10px; padding:10px 14px;
      background: linear-gradient(180deg, var(--brand-gradA), var(--brand-gradB));
      border:1px solid var(--edge); border-radius:12px; box-shadow: 0 8px 24px rgba(0,0,0,.25);
      font-weight:700;
    }
    .wrap{ min-height:100%; display:flex; align-items:flex-start; justify-content:center; padding:28px 14px 24px; }
    .card{
      width:min(960px, calc(100vw - 28px));
      background: linear-gradient(180deg, var(--brand-dim1), var(--brand-dim2));
      border:1px solid var(--edge); border-radius:var(--radius); box-shadow: var(--shadow);
      padding:22px; padding-bottom:18px; position:relative; overflow:hidden;
    }
    h1{ margin:0 0 10px; font-size:26px }
    .steps{ display:flex; gap:8px; margin-bottom:10px; flex-wrap:wrap }
    .chip{ padding:6px 10px; border-radius:999px; border:1px solid var(--edge); background:#0b1f1f; color:#cff6ef; opacity:.85; transition:.2s }
    .chip.active{ background:#0f2f2f; color:#fff; opacity:1; border-color: var(--accentTop) }
    .panel{ display:none; }
    .panel.active{ display:block; animation: slideFade .28s ease }
    @keyframes slideFade{ from{opacity:0; transform:translateY(6px) scale(.995)} to{opacity:1; transform:translateY(0) scale(1)} }
    .micro{ font-size:12px; color:#b8f7ee; opacity:.9; margin:6px 0 6px }
    input, select, textarea{
      width:100%; color:#dffdfa; background:#071616; border:1px solid #153433;
      border-radius:12px; padding:12px 14px; outline:none; font: inherit; transition:border-color .2s, box-shadow .2s, transform .08s;
    }
    input:focus, select:focus, textarea:focus{ border-color: var(--accentTop); box-shadow: 0 0 0 3px rgba(94,234,212,.18) }
    textarea{ min-height:120px; resize:vertical }
    .grid{ display:grid; grid-template-columns:repeat(2,1fr); gap:12px }
    @media (max-width: 720px){ .grid{ grid-template-columns: 1fr } }
    .actions{
      position: sticky; bottom: 0; padding-top: 12px; margin-top: 10px;
      display:flex; justify-content:space-between; gap:10px;
      background: linear-gradient(180deg, transparent, #0c2323d8 40%, #0c2323ee 100%);
      border-top: 1px solid var(--edge);
    }
    .btn{
      border:1px solid #153433; background:#0a1e1e; color:#dcfffb; padding:10px 16px; border-radius:12px; cursor:pointer;
      transition: transform .06s ease, background .2s ease, border-color .2s ease, box-shadow .2s;
      user-select:none; position:relative; overflow:hidden;
    }
    .btn:hover{ transform: translateY(-1px); box-shadow: 0 8px 24px rgba(0,0,0,.22) }
    .btn:active{ transform: translateY(1px) scale(.99) }
    .btn.primary{ background: linear-gradient(180deg, var(--accentTop), var(--accentBot)); border-color: var(--accentTop); color:#042220; font-weight:700 }
    .btn.ghost{ background:#0d2626; color:#dbfffb }
    .btn .pulse{
      position:absolute; width:8px; height:8px; background:rgba(255,255,255,.6); border-radius:50%; pointer-events:none; transform:translate(-50%,-50%);
      animation: pulse .6s ease-out forwards;
    }
    @keyframes pulse{ from{opacity:.9; width:8px; height:8px} to{opacity:0; width:160px; height:160px} }
    .glow-on{ animation: glowPop 900ms ease-out 120ms 1 both }
    @keyframes glowPop{
      0%{ box-shadow: 0 0 0 rgba(94,234,212,0); transform:none }
      40%{ box-shadow: 0 0 22px rgba(94,234,212,.45); transform: translateY(-1px) }
      100%{ box-shadow: 0 0 0 rgba(0,0,0,0); transform:none }
    }
    pre{
      background:#071616; border:1px solid #153433; padding:12px 14px; border-radius:12px; white-space:pre-wrap; max-height:60vh; overflow:auto
    }
    .scroller{ max-height:50vh; overflow:auto; padding-right:6px }
    /* Mouse tracer */
    .trail { position:fixed; top:0; left:0; width:14px; height:14px; pointer-events:none; z-index:9999;
      border-radius:50%;
      background: radial-gradient(circle, rgba(255,170,90,.98), rgba(255,170,90,0) 72%);
      filter: drop-shadow(0 0 8px rgba(255,170,90,.75));
      transition: transform .07s linear; opacity:.95;
    }
  </style>
</head>
<body>
  <header><div class="brand">Image 2 XML Generator</div></header>
  <div class="wrap">
    <main class="card">
      <div class="steps">
        <div class="chip active" id="stepChip1">1 · Describe</div>
        <div class="chip" id="stepChip2">2 · Details</div>
        <div class="chip" id="stepChip3">3 · Output</div>
      </div>

      <section class="panel active" id="step1">
        <h1>Step 1 · Describe</h1>
        <label class="micro">Concept</label>
        <textarea id="concept" placeholder="Main subject and scene (e.g., A golden retriever with a red bandana in a sunflower field)…"></textarea>
        <div class="actions">
          <button class="btn ghost" id="clear1">Clear</button>
          <button class="btn primary" id="next1">Next</button>
        </div>
      </section>

      <section class="panel" id="step2">
        <h1>Step 2 · Details</h1>
        <div id="fields" class="grid scroller">
          <div>
            <label class="micro">Style</label>
            <input id="style" placeholder="Art style or genre (e.g., photorealistic, watercolor, cyberpunk)" />
          </div>
          <div>
            <label class="micro">Lighting</label>
            <input id="lighting" placeholder="e.g., golden hour, cinematic, soft studio" />
          </div>
          <div>
            <label class="micro">Composition</label>
            <input id="composition" placeholder="Camera angle, framing (wide, close-up), lens (35mm)" />
          </div>
          <div>
            <label class="micro">Color</label>
            <input id="color" placeholder="Palette / tonal quality (muted pastels, high contrast)" />
          </div>
          <div>
            <label class="micro">Aspect Ratio</label>
            <input id="aspect" placeholder="1:1, 16:9, 9:16, 4:5" />
          </div>
          <div>
            <label class="micro">Negative</label>
            <input id="negative" placeholder="What to avoid (blurry, artifacts, extra fingers)" />
          </div>
          <div>
            <label class="micro">Extras</label>
            <input id="extras" placeholder="Extra modifiers (4K, ultra-detailed, film grain)" />
          </div>
        </div>
        <div class="actions">
          <button class="btn ghost" id="back2">Back</button>
          <div style="display:flex; gap:10px">
            <button class="btn primary" id="toConvert">Convert → XML</button>
          </div>
        </div>
      </section>

      <section class="panel" id="step3">
        <h1>Step 3 · Structured Output</h1>
        <pre id="out"></pre>
        <div class="actions">
          <button class="btn ghost" id="back3">Back</button>
          <button class="btn primary" id="copyOnly">Copy</button>
        </div>
      </section>
    </main>
  </div>

  <!-- mouse tracer nodes -->
  <div id="trail0" class="trail"></div>
  <div id="trail1" class="trail" style="width:12px;height:12px;opacity:.85"></div>
  <div id="trail2" class="trail" style="width:10px;height:10px;opacity:.7"></div>
  <div id="trail3" class="trail" style="width:8px;height:8px;opacity:.55"></div>
  <div id="trail4" class="trail" style="width:6px;height:6px;opacity:.4"></div>

<script>
const $ = id => document.getElementById(id);
function setStep(n){
  [1,2,3].forEach(i=>{
    document.getElementById('step'+i).classList.toggle('active', i===n);
    document.getElementById('stepChip'+i).classList.toggle('active', i===n);
  });
  // Glow the primary button on the new slide
  setTimeout(()=>{
    const panel = document.getElementById('step'+n);
    const btn = panel && panel.querySelector('.btn.primary');
    if(btn){ btn.classList.remove('glow-on'); void btn.offsetWidth; btn.classList.add('glow-on'); }
  }, 320);
  window.scrollTo({top:0, behavior:'smooth'});
}
$('next1').onclick = (e)=> { ripple(e); setStep(2); };
$('back2').onclick = (e)=> { ripple(e); setStep(1); };
$('back3').onclick = (e)=> { ripple(e); setStep(2); };
$('clear1').onclick = (e)=> { ripple(e); $('concept').value=''; };

function escapeXml(s){ return (s||'').replace(/[<>&'"]/g, c => ({'<':'&lt;','>':'&gt;','&':'&amp;','"':'&quot;',"'":'&apos;'}[c])); }
$('toConvert').onclick = (e)=>{
  ripple(e);
  const xml = `<prompt>
  <description>${escapeXml($('concept').value.trim())}</description>
  ${$('style').value.trim()?`<style>${escapeXml($('style').value.trim())}</style>`:''}
  ${$('lighting').value.trim()?`<lighting>${escapeXml($('lighting').value.trim())}</lighting>`:''}
  ${$('composition').value.trim()?`<composition>${escapeXml($('composition').value.trim())}</composition>`:''}
  ${$('color').value.trim()?`<color>${escapeXml($('color').value.trim())}</color>`:''}
  ${$('aspect').value.trim()?`<aspect>${escapeXml($('aspect').value.trim())}</aspect>`:''}
  ${$('negative').value.trim()?`<negative>${escapeXml($('negative').value.trim())}</negative>`:''}
  ${$('extras').value.trim()?`<extras>${escapeXml($('extras').value.trim())}</extras>`:''}
</prompt>`;
  $('out').textContent = xml.trim();
  setStep(3);
};

$('copyOnly').onclick = async (e)=>{
  ripple(e);
  try{ await navigator.clipboard.writeText($('out').textContent) }catch(err){}
  toast('Copied');
};

// Micro-interactions
function ripple(e){
  const b = e.currentTarget; if(!b || !b.classList.contains('btn')) return;
  const r = document.createElement('span'); r.className='pulse';
  const rect = b.getBoundingClientRect();
  r.style.left = (e.clientX - rect.left)+'px';
  r.style.top = (e.clientY - rect.top)+'px';
  b.appendChild(r); setTimeout(()=> r.remove(), 600);
}
let toastTimer;
function toast(msg){
  let t = document.getElementById('toast');
  if(!t){
    t = document.createElement('div'); t.id='toast';
    t.style.cssText='position:fixed;left:50%;bottom:28px;transform:translateX(-50%);background:#0d2626;color:#eafffb;border:1px solid #234344;padding:10px 14px;border-radius:12px;box-shadow:0 10px 24px rgba(0,0,0,.35);z-index:99999;opacity:0;transition:opacity .2s, transform .2s;';
    document.body.appendChild(t);
  }
  t.textContent = msg; t.style.opacity='1'; t.style.transform='translateX(-50%) translateY(0)';
  clearTimeout(toastTimer);
  toastTimer = setTimeout(()=>{ t.style.opacity='0'; t.style.transform='translateX(-50%) translateY(6px)'; }, 1200);
}

// Mouse tracer (matching Text v4 behavior)
const trails = [ 'trail0','trail1','trail2','trail3','trail4' ].map(id => $(id));
let targetX=window.innerWidth/2, targetY=window.innerHeight/2;
let pts = trails.map((_,i)=>({ x: targetX - i*5, y: targetY - i*5 }));
window.addEventListener('pointermove', (e)=>{ targetX = e.clientX; targetY = e.clientY; });
function animate(){
  pts[0].x += (targetX - pts[0].x) * 0.5;
  pts[0].y += (targetY - pts[0].y) * 0.5;
  for(let i=1;i<pts.length;i++){
    pts[i].x += (pts[i-1].x - pts[i].x) * 0.34;
    pts[i].y += (pts[i-1].y - pts[i].y) * 0.34;
  }
  trails.forEach((el,i)=>{
    el.style.transform = `translate(${pts[i].x - el.offsetWidth/2}px, ${pts[i].y - el.offsetHeight/2}px)`;
  });
  requestAnimationFrame(animate);
}
animate();
</script>
</body>
</html>
